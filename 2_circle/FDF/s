// double		acos(double);

// double		acosh(double);

// double		asin(double);

// double		asinh(double);

// double		atan(double);

// double		atan2(double, double);

// double		atanh(double);

double		cbrt(double); 세제곱근

double		ceil(double); 소숫점 올림

double		copysign(double, double); 첫 번째 인자의 값과 두 번째 인자의 부호를 더한 값을 반환

// double		cos(double);

// double		cosh(double);

double		erf(double); //err function : 가우스 오차함수

double		erfc(double); //여오차함수

double		exp(double); //e의 거듭제곱 값을 반환한다.

double		exp2(double); //2의 거듭제곱 값을 반환한다.

double		expm1(double); //e의 거듭제곱 -1 값을 반환한다.

double		fabs(double); //부동 소수점의 절대값을 반환

double		fdim(double, double); //두 부동소수점의 차 (양수) 를 반한다.

double		floor(double); // 소숫점 버림

double		fma(double, double, double); // x * y + z 반환

double		fmax(double, double); //max

double		fmin(double, double); // min

double		fmod(double, double); // 부동 소수점 나머지 연산

double		frexp(double, int *); // m 2^n 에서 m을 반환하고 n을 int *에 저장한다.

double		hypot(double, double); // 삼각형 빗변 길이 반환

int			ilogb(double); // log_2(x)의 정수부분. (int)

// Bessel function : 2차 상미분 방정식의 해
// 베셀 방정식은 2차 상미분 방정식으로 두 개의 선형 독립 해를 가진다. @가 정수일 경우
// 두 해 중 하나는 발산하지 않고 하나는 발산하는데
// 발산하지 않는 함수를 1종 베셀함수(J)
// 발한하지 않는 함수를 2종 베셀함수(Y)라 한다.
// @가 0인 경우 0차수의 베셀 방정식, 1인 경우 1차수의 베셀 방정식이라 하고
// n인 경우 n차수의 베셀 방정식이라고 한다.
double		j0(double);
double		y0(double); //
double		j1(double);
double		y1(double); //
double		jn(int, double);
double		yn(int, double); //

double		ldexp(double d, int i); // d * 2^i

double		lgamma(double); // ln(|gamma(x)|) gamma() : 감마함수

long long	llrint(double);

long long	llround(double);

double		log(double); //ln(x)

double		log10(double); //log_10(x)

double		log1p(double); // ln(1 + x)

double		log2(double); // log_2 (x)

double		logb(double); // log2 에서 정수부분만 반환 (double)

long		lrint(double);

long		lround(double);

double		modf(double, double *); // 부동소수점 정수(반환) 소수(참조 저장) 분리

double		nan(const char *); // quiet Nan을 반환

double		nearbyint(double); // 가까운 정수 반환. rint와 다르게 부정확한 부동소수점 예외를 발생시키지 않는다.

double		nextafter(double, double); // x에서 y방향으로표현 가능한 다음 부동소수점

double		nexttoward(double, long double); // nextafter와 매개변수만 다름.

double		pow(double, double); //a^b

double		remainder(double, double); // 부호 있는 나머지

double		remquo(double, double, int *); // 부호 있는 나머지와 마지막 비트

double		rint(double); // 소숫점 반올림 (가장 가까운 짝수로 반올림)-> rint(-1.5) = -2;

double		round(double); // 소숫점 반올림 (0~4 버림 5~9 올림) -> round(-1.5) = -1;

double		scalbln(double a, long l); // a * FLT_RADIX^l binary 시스템에서 FLT_RADIX = 2이다.

double		scalbn(double a, int i); // a * FLT_RADIX^i

// double		sin(double);

// double		sinh(double);

double		sqrt(double); // 제곱근

// double		tan(double);

// double		tanh(double);

double		tgamma(double); // gamma(x);

double		trunc(double); // 소숫점 버림 floor(-3.5) = -4 trunc(-3.5) = -3

int isgreater(real-floating x, real-floating y); x>y 매크로 함수
int isgreaterequal(real - floating x, real - floating y); x>=y 매크로 함수
int isless(real-floating x, real-floating y); x<y 매크로 함수
int islessequal(real-floating x, real-floating y); x<=y 매크로 함수
int islessgreater(real-floating x, real-floating y); (x>y)||(x<y) 매크로 함수
int isunordered(real-floating x, real-floating y); (isnan(x)||isnan(y)) 매크로 함수
int fpclassify(real-floating x); x가 어떤 종류의 값인지 판별
int isfinite(real - floating x); x가 inf가 아닌지 판별
int isnan(real-floating x); x가 nan인지 판별
int isinf(real-floating x); x가 inf인지 팔별
int signbit(real-floating x); x가 음수인지 판별
